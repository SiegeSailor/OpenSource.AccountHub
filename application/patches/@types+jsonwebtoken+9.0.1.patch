diff --git a/node_modules/@types/jsonwebtoken/index.d.ts b/node_modules/@types/jsonwebtoken/index.d.ts
index e13ca1f..2adee28 100755
--- a/node_modules/@types/jsonwebtoken/index.d.ts
+++ b/node_modules/@types/jsonwebtoken/index.d.ts
@@ -65,7 +65,7 @@ export interface SignOptions {
     jwtid?: string | undefined;
     mutatePayload?: boolean | undefined;
     noTimestamp?: boolean | undefined;
-    header?: JwtHeader | undefined;
+    header?: JWTHeader | undefined;
     encoding?: string | undefined;
     allowInsecureKeySizes?: boolean | undefined;
     allowInvalidAsymmetricKeyTypes?: boolean | undefined;
@@ -100,7 +100,7 @@ export type VerifyErrors =
     | JsonWebTokenError
     | NotBeforeError
     | TokenExpiredError;
-export type VerifyCallback<T = Jwt | JwtPayload | string> = (
+export type VerifyCallback<T = JWT | JWTPayload | string> = (
     error: VerifyErrors | null,
     decoded: T | undefined,
 ) => void;
@@ -111,11 +111,11 @@ export type SignCallback = (
 ) => void;
 
 // standard names https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1
-export interface JwtHeader {
+export interface JWTHeader {
     alg: string | Algorithm;
     typ?: string | undefined;
     cty?: string | undefined;
-    crit?: Array<string | Exclude<keyof JwtHeader, 'crit'>> | undefined;
+    crit?: Array<string | Exclude<keyof JWTHeader, 'crit'>> | undefined;
     kid?: string | undefined;
     jku?: string | undefined;
     x5u?: string | string[] | undefined;
@@ -125,7 +125,7 @@ export interface JwtHeader {
 }
 
 // standard claims https://datatracker.ietf.org/doc/html/rfc7519#section-4.1
-export interface JwtPayload {
+export interface JWTPayload {
     [key: string]: any;
     iss?: string | undefined;
     sub?: string | undefined;
@@ -134,11 +134,12 @@ export interface JwtPayload {
     nbf?: number | undefined;
     iat?: number | undefined;
     jti?: string | undefined;
+    identifier?: string | undefined;
 }
 
-export interface Jwt {
-    header: JwtHeader;
-    payload: JwtPayload | string;
+export interface JWT {
+    header: JWTHeader;
+    payload: JWTPayload | string;
     signature: string;
 }
 
@@ -156,7 +157,7 @@ export type SigningKeyCallback = (
 ) => void;
 
 export type GetPublicKeyOrSecret = (
-    header: JwtHeader,
+    header: JWTHeader,
     callback: SigningKeyCallback
 ) => void;
 
@@ -205,9 +206,9 @@ export function sign(
  * [options] - Options for the verification
  * returns - The decoded token.
  */
-export function verify(token: string, secretOrPublicKey: Secret, options: VerifyOptions & { complete: true }): Jwt;
-export function verify(token: string, secretOrPublicKey: Secret, options?: VerifyOptions & { complete?: false }): JwtPayload | string;
-export function verify(token: string, secretOrPublicKey: Secret, options?: VerifyOptions): Jwt | JwtPayload | string;
+export function verify(token: string, secretOrPublicKey: Secret, options: VerifyOptions & { complete: true }): JWT;
+export function verify(token: string, secretOrPublicKey: Secret, options?: VerifyOptions & { complete?: false }): JWTPayload;
+export function verify(token: string, secretOrPublicKey: Secret, options?: VerifyOptions): JWT | JWTPayload | string;
 
 /**
  * Asynchronously verify given token using a secret or a public key to get a decoded token
@@ -221,19 +222,19 @@ export function verify(token: string, secretOrPublicKey: Secret, options?: Verif
 export function verify(
     token: string,
     secretOrPublicKey: Secret | GetPublicKeyOrSecret,
-    callback?: VerifyCallback<JwtPayload | string>,
+    callback?: VerifyCallback<JWTPayload | string>,
 ): void;
 export function verify(
     token: string,
     secretOrPublicKey: Secret | GetPublicKeyOrSecret,
     options: VerifyOptions & { complete: true },
-    callback?: VerifyCallback<Jwt>,
+    callback?: VerifyCallback<JWT>,
 ): void;
 export function verify(
     token: string,
     secretOrPublicKey: Secret | GetPublicKeyOrSecret,
     options?: VerifyOptions & { complete?: false },
-    callback?: VerifyCallback<JwtPayload | string>,
+    callback?: VerifyCallback<JWTPayload | string>,
 ): void;
 export function verify(
     token: string,
@@ -248,6 +249,6 @@ export function verify(
  * [options] - Options for decoding
  * returns - The decoded Token
  */
-export function decode(token: string, options: DecodeOptions & { complete: true }): null | Jwt;
-export function decode(token: string, options: DecodeOptions & { json: true }): null | JwtPayload;
-export function decode(token: string, options?: DecodeOptions): null | JwtPayload | string;
+export function decode(token: string, options: DecodeOptions & { complete: true }): null | JWT;
+export function decode(token: string, options: DecodeOptions & { json: true }): null | JWTPayload;
+export function decode(token: string, options?: DecodeOptions): null | JWTPayload | string;
